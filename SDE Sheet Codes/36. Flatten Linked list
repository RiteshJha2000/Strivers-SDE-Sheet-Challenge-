/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int data;
 *		Node *next;
 * 		Node *child;
 *		Node() : data(0), next(nullptr), child(nullptr){};
 *		Node(int x) : data(x), next(nullptr), child(nullptr) {}
 *		Node(int x, Node *next, Node *child) : data(x), next(next), child(child) {}
 * };
 */

Node* merge(Node* a,Node* b){
	Node* temp = new Node(0);
	Node* res = temp;
	while(a && b){
		if(a->data > b->data){
			temp->child = b;
			temp = temp->child;
			b = b->child;
		}
		else{
			temp->child = a;
			temp = temp->child;
			a = a->child;
		}
	}
	if(a) temp->child = a;
	if(b) temp->child = b;

	return res->child;
}

Node* flattenLinkedList(Node* head) 
{
	// Write your code here
	if(!head || !head->next) return head;

	Node* root = head->next;
	head->next = NULL;
	root = flattenLinkedList(root);

	head = merge(head,root);

	return head;
}
