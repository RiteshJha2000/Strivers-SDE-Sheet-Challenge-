#include <bits/stdc++.h> 

int dp[17][17];
int solve(int i,int j,int n,int m){
	if(i>=n || j>=m) return 0;
	if(dp[i][j]!=-1) return dp[i][j];
	if(i==n-1 && j==m-1) return 1;
	return dp[i][j] = solve(i+1,j,n,m) + solve(i,j+1,n,m);
}

int uniquePaths(int m, int n) {
	// Write your code here.
	// memset(dp,-1,sizeof(dp));
	// return solve(0,0,m,n);
	// int dp[m][n];
	// memset(dp,0,sizeof(dp));

	// for(int i=m-1;i>=0;i--){
	// 	for(int j=n-1;j>=0;j--){
	// 		if(i==m-1 && j==n-1) dp[i][j]=1;
	// 		else{
	// 			int down = 0;
	// 			int right = 0;
	// 			if(i+1<m) down = dp[i+1][j];
	// 			if(j+1<n) right = dp[i][j+1];
	// 			dp[i][j] = down + right;
	// 		}
	// 	}
	// }

	// return dp[0][0];

	vector<int>dp(n,1);

	for(int i=m-2;i>=0;i--){
		vector<int>temp(n,0);
		temp[n-1]=1;
		for(int j=n-2;j>=0;j--){
			temp[j] = dp[j] + temp[j+1];
		}
		dp = temp;
	}

	return dp[0];
}
