#include <bits/stdc++.h>



vector<vector<int>> pairSum(vector<int> &arr, int s){
   // Write your code here.
   // Brute force TC -> O(N^2)

   // Better approach :
   // Using map and iteration  TC -> O(NlogN)  SC -> O(N)

   // map<int,int>mp;
   // for(auto it:arr) mp[it]++;

   // int n = arr.size();
   // vector<vector<int>>ans;

   // for(auto it:mp){
   //    int num = s-it.first;
   //    if(mp.find(num)!=mp.end()){
   //       int t;
   //       if(num == it.first) t = ((mp[num])*(mp[num]-1))/2;
   //       else
   //       t = mp[it.first]*mp[num];
   //       while(t--){
   //          ans.push_back({it.first,num});
   //       }
   //       mp[it.first]=0;
   //    }
   // }
   // return ans;


   // TC of both is O(NlogN)  

   // vector<vector<int>> ans;

   // unordered_map<int,int>mp;
   

   // for(int i=0;i<arr.size();i++){

   //    if(mp[s-arr[i]]){

   //    int val=mp[s-arr[i]];

   //    vector<int> output;

   //    while(val--){

   //       output.push_back(min(arr[i],s-arr[i]));

   //       output.push_back(max(arr[i],s-arr[i]));

   //       ans.push_back(output);

   //    }
   //    }

   //    mp[arr[i]]++;

   // }

   // sort(ans.begin(),ans.end());

   // return ans;

   // without map
   vector<vector<int>> ans;
   int n = arr.size();
   sort(arr.begin(),arr.end());
   int low = 0;
   int high = n-1;
   while(low<high){
      if(arr[low]+arr[high]==s){
         if(arr[low]!=arr[high]){

            int l=low+1; int lc=1;
            int r=high-1;  int hc=1;
            while(arr[low]==arr[l]){
               l++;
               lc++;
            }
            while(arr[high]==arr[r]){
               r--;
               hc++;
            }
            for(int i=0;i<lc*hc;i++){
               ans.push_back({arr[low],arr[high]});
            }
            low = l;
            high = r;
         }
         else{
            int c = high-low+1;
            int val = (c*(c-1))/2;
            for(int i=0;i<val;i++){
               ans.push_back({arr[low],arr[low]});
            }
            return ans;
         }
      }
      else if(arr[low]+arr[high] > s) high--;
      else low++;
   }
   return ans;
}
